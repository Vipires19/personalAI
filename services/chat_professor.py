## Importando bibliotecas e criando o client
import streamlit as st
from langchain.tools import tool
from langgraph.prebuilt.tool_node import ToolNode
from langgraph.prebuilt import create_react_agent
from langchain_openai.chat_models import ChatOpenAI
import os
from langchain_community.document_loaders import Docx2txtLoader
import uuid
import logging
import sqlite3
from datetime import datetime
from fpdf import FPDF
from langgraph.checkpoint.mongodb import MongoDBSaver
import logging
import sqlite3
import boto3
from pymongo import MongoClient
import urllib.parse
from io import BytesIO
from langchain_openai import OpenAIEmbeddings
from langchain_mongodb.vectorstores import MongoDBAtlasVectorSearch

MONGO_USER = urllib.parse.quote_plus(st.secrets['MONGO_USER'])
MONGO_PASS = urllib.parse.quote_plus(st.secrets['MONGO_PASS'])
embedding_model = OpenAIEmbeddings(api_key=st.secrets["OPENAI_API_KEY"], model="text-embedding-3-large")
client = MongoClient("mongodb+srv://%s:%s@cluster0.gjkin5a.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0" % (MONGO_USER, MONGO_PASS))
db = client.personalAI
coll = db.memoria_chat
coll2 = db.alunos
coll3 = db.treinos
coll4 = db.avalia√ß√£o
coll5 = db.vetores
coll6 = db.feedback


#DB_PATH1 = "memoria_chatbot2.db"

def carrega_txt(caminho):
    loader = Docx2txtLoader(caminho)
    lista_documentos = loader.load()
    documento = '\n\n'.join([doc.page_content for doc in lista_documentos])
    return documento

caminho = "files/Manual de Apoio para Montagem de Treinos.docx"

OPENAI_API_KEY = st.secrets['OPENAI_API_KEY']
BUCKET_PUBLIC_URL = st.secrets['ENDPOINT_URL']
BUCKET_PUBLIC_URL_2 = st.secrets['URL_BUCKET']
R2_KEY = st.secrets['R2_KEY']
R2_SECRET_KEY = st.secrets['R2_SECRET_KEY']
BUCKET = 'personalai'

SYSTEM_PROMPT = """
üß† Backstory:
Voc√™ √© Atlas, um agente LLM operando dentro de um sistema LangGraph, com acesso a ferramentas para consultar banco de dados e documentos t√©cnicos. Seu papel √© atuar como um assistente virtual inteligente para personal trainers, fornecendo suporte anal√≠tico, pedag√≥gico e pr√°tico com base nas ferramentas dispon√≠veis. Seu papel √© apoiar personal trainers no uso da plataforma, ajudando a interpretar relat√≥rios, tirar d√∫vidas, sugerir boas pr√°ticas e mostrar como a IA pode facilitar o acompanhamento dos alunos.

üìö Fonte de informa√ß√£o:
Para responder perguntas t√©cnicas, utilize a fun√ß√£o consultar_material_de_apoio, que acessa os documentos enviados pelos personal trainers.


üéØ Diretrizes de comportamento:
- Sempre mantenha um **tom amig√°vel, confiante e acess√≠vel**, como um parceiro de trabalho experiente.
- Seu foco principal √© **ajudar personal trainers a aproveitarem ao m√°ximo as funcionalidades e benef√≠cios da plataforma CamppoAI**.
- Voc√™ pode:
  - Sugerir boas pr√°ticas no uso dos relat√≥rios e v√≠deos.
  - Explicar como interpretar os gr√°ficos e dados das an√°lises.
  - Dar dicas de como comparar v√≠deos, monitorar progresso e gerar engajamento com alunos.
  - Ensinar como compartilhar v√≠deos e PDFs com os alunos de forma clara e simples.
  - Falar sobre como a IA pode ajudar a automatizar partes do acompanhamento.
  - Comentar sobre funcionalidades futuras (caso haja interesse do usu√°rio).

üö´ Limites:
- N√£o deve, em hip√≥tese alguma, fornecer diagn√≥sticos de sa√∫de, prescri√ß√£o de treino ou nutri√ß√£o.
- Caso o usu√°rio pergunte sobre temas fora da plataforma (como muscula√ß√£o geral, dieta ou treinos espec√≠ficos), oriente gentilmente que seu foco √© no suporte ao uso da plataforma CamppoAI.

üìã Fluxo para gera√ß√£o de planos de treino:
1. Sempre que o usu√°rio mencionar que deseja um treino, **interrompa o fluxo e pergunte se √© para um aluno espec√≠fico.** N√£o prossiga at√© obter essa resposta.
2. Se sim:
   - Solicite o **nome do aluno**.
   - Acesse os dados do aluno no banco de dados usando a fun√ß√£o apropriada.
3. S√≥ ent√£o prossiga com as perguntas: objetivo, n√≠vel, frequ√™ncia e equipamentos.
4. Personalize as sugest√µes com base nas informa√ß√µes do aluno.
5. Ap√≥s finalizar a sugest√£o de treino, sempre pergunte: "Voc√™ quer adicionar algum aquecimento ou alongamento espec√≠fico antes ou depois do treino?"
6. Quando for montar um treino, **sempre gere a divis√£o e os exerc√≠cios de cada dia juntos**. O plano de treino deve ser enviado completo, sem etapas intermedi√°rias.

üìù An√°lise de feedbacks:
- Sempre que o usu√°rio perguntar sobre evolu√ß√£o, adapta√ß√£o ou se um treino precisa de mudan√ßa, utilize as fun√ß√µes de an√°lise de feedback.
- Leve em considera√ß√£o: esfor√ßo, recupera√ß√£o, frequ√™ncia de treino, dura√ß√£o e objetivo.
- Gere recomenda√ß√µes claras, sempre explicando o *porqu√™* da sugest√£o.

üí¨ Exemplo de sauda√ß√£o:
"E a√≠, Personal! üëä Eu sou o Atlas, seu assistente digital da CamppoAI Solutions. T√¥ aqui pra te ajudar a tirar o m√°ximo da nossa plataforma de an√°lise de exerc√≠cios. Me conta, o que voc√™ precisa hoje?"
"""

@tool("consultar_material_de_apoio")
def consultar_material_de_apoio(pergunta: str) -> str:
    """
    Consulta o material de apoio t√©cnico enviado pelos personal trainers para responder perguntas espec√≠ficas.
    """
    vectorStore = MongoDBAtlasVectorSearch(coll5, embedding=embedding_model, index_name='default')
    docs = vectorStore.similarity_search(pergunta)
    if not docs:
        return "Nenhum conte√∫do relevante encontrado no material de apoio."
    
    return "\n\n".join([doc.page_content[:400] for doc in docs])

@tool('analisar_feedback_node')
def analisar_feedback_node(nome_aluno: str) -> dict:
    """
    Analisa o feedback mais recente do aluno considerando suas caracter√≠sticas pessoais
    e retorna sugest√µes ou observa√ß√µes relevantes.
    """

    aluno = coll2.find_one({"student_name": nome_aluno})
    feedback = coll6.find_one({"student": nome_aluno}, sort=[("data", -1)])

    if not aluno or not feedback:
        return {"erro": "Aluno ou feedback n√£o encontrado."}

    objetivo = aluno.get("objective", "N√£o informado").capitalize()
    experiencia = aluno.get("experience", "N√£o informado").capitalize()
    estilo = aluno.get("style", "N√£o informado")
    tempo = aluno.get("duration", 60)
    frequencia = aluno.get("frequency", 3)

    esforco = feedback.get("esforco", "N√£o informado")
    recuperacao = feedback.get("recover", "N√£o informado")
    mensagem = feedback.get("message", "")
    tags = feedback.get("tags", [])

    analise = []

    if esforco in ["Muito Alto", "Extremo"]:
        analise.append("Esfor√ßo elevado relatado. Verificar se a intensidade est√° adequada ao condicionamento do aluno.")
    elif esforco in ["Muito Baixo"]:
        analise.append("Esfor√ßo muito baixo. O treino pode estar f√°cil demais, dependendo do objetivo.")

    if recuperacao in ["Ruim", "P√©ssima"]:
        analise.append("Recupera√ß√£o insuficiente. Pode ser necess√°rio ajustar o volume, carga ou tempo de descanso.")
    elif recuperacao in ["Excelente", "Boa"] and esforco in ["Moderado", "Alto"]:
        analise.append("Boa recupera√ß√£o com esfor√ßo adequado. Sinal de que o treino est√° bem ajustado.")

    if experiencia.lower() in ["iniciante", "sedent√°rio"]:
        analise.append("Aluno com pouca experi√™ncia. Importante evitar sobrecargas nas primeiras semanas.")

    if frequencia < 3:
        analise.append("Frequ√™ncia baixa. Foque em treinos mais completos em cada sess√£o.")
    elif frequencia >= 5 and tempo >= 60:
        analise.append("Boa disponibilidade. Pode-se distribuir melhor o volume ao longo da semana.")

    if "funcional" in estilo.lower():
        analise.append("Estilo funcional indicado. Use movimentos multiarticulares variados.")
    elif "muscula√ß√£o" in estilo.lower():
        analise.append("Estilo muscula√ß√£o. Pode usar divis√µes tradicionais com progress√£o de carga.")

    if objetivo.lower() == "emagrecimento":
        analise.append("Foco em emagrecimento. Mantenha intensidade e frequ√™ncia para maximizar gasto cal√≥rico.")
    elif objetivo.lower() == "hipertrofia":
        analise.append("Foco em hipertrofia. Cuidar do volume, t√©cnica e descanso entre sess√µes.")

    if tags:
        analise.append(f"Tags do feedback: {', '.join(tags)}")
    if mensagem:
        analise.append(f"Coment√°rio do aluno: \"{mensagem}\"")

    return {
        "aluno": nome_aluno,
        "objetivo": objetivo,
        "experiencia": experiencia,
        "esforco": esforco,
        "recuperacao": recuperacao,
        "analise_ia": analise
    }

@tool('get_user')
def get_user_by_name(name: str) -> dict:
    """
    Busca os dados do aluno pelo nome.
    """
    user_data = coll2.find_one({'student_name': name}, {'_id': 0})
    return user_data or {"erro": "Aluno n√£o encontrado"}

@tool("resumir_feedbacks_recentes")
def resumir_feedbacks_recentes(nome_aluno: str) -> dict:
    """
    Resume os √∫ltimos feedbacks do aluno, identificando padr√µes de esfor√ßo, recupera√ß√£o e principais reclama√ß√µes.

    Par√¢metros:
    - feedbacks: lista dos √∫ltimos feedbacks do aluno (idealmente os 3-5 mais recentes)

    Retorna:
    - Frequ√™ncia mais comum de esfor√ßo e recupera√ß√£o
    - Tags mais recorrentes
    - Tend√™ncia geral (fadiga, recupera√ß√£o boa, etc.)
    """
    feedbacks = list(coll6.find({"student": nome_aluno}).sort("data", -1).limit(5))
    if not feedbacks:
        return {"erro": "Nenhum feedback encontrado."}

    esforco_vals = []
    recuperacao_vals = []
    tags_total = []

    for fb in feedbacks:
        esforco_vals.append(fb.get("esforco", ""))
        recuperacao_vals.append(fb.get("recover", ""))
        tags_total.extend(fb.get("tags", []))

    esforco_freq = {e: esforco_vals.count(e) for e in set(esforco_vals)}
    recuperacao_freq = {r: recuperacao_vals.count(r) for r in set(recuperacao_vals)}
    tag_freq = {t: tags_total.count(t) for t in set(tags_total)}

    tendencia = "Aluno em boa recupera√ß√£o." if "Boa" in recuperacao_freq or "Excelente" in recuperacao_freq else "Poss√≠vel sinal de fadiga."

    return {
        "esforco_frequente": max(esforco_freq, key=esforco_freq.get),
        "recuperacao_frequente": max(recuperacao_freq, key=recuperacao_freq.get),
        "tags_mais_frequentes": sorted(tag_freq.items(), key=lambda x: -x[1]),
        "tendencia": tendencia
    }

@tool("gerar_relatorio_evolucao")
def gerar_relatorio_evolucao(nome_aluno: str) -> dict:
    """
    Gera um relat√≥rio comparativo entre as duas √∫ltimas avalia√ß√µes f√≠sicas do aluno.

    Par√¢metros:
    - avaliacoes: lista com ao menos dois documentos de avalia√ß√£o corporal ordenados por data.

    Retorna:
    - Um dicion√°rio com as diferen√ßas de gordura, massa magra e peso total entre as duas datas.
    """

    avaliacoes = list(coll4.find({"student_name": nome_aluno}).sort("last", 1))
    if len(avaliacoes) < 2:
        return {"erro": "√â necess√°rio pelo menos duas avalia√ß√µes para gerar comparativo."}

    av1, av2 = avaliacoes[-2], avaliacoes[-1]
    comparativo = []

    delta_fat = av2["body_fat"] - av1["body_fat"]
    delta_muscle = av2["body_muscle"] - av1["body_muscle"]
    delta_peso = av2["peso"] - av1["peso"]

    if delta_fat < 0:
        comparativo.append(f"Perdeu {abs(round(delta_fat, 2))} kg de gordura corporal.")
    elif delta_fat > 0:
        comparativo.append(f"Ganhou {round(delta_fat, 2)} kg de gordura corporal.")

    if delta_muscle > 0:
        comparativo.append(f"Ganhou {round(delta_muscle, 2)} kg de massa magra.")
    elif delta_muscle < 0:
        comparativo.append(f"Perdeu {abs(round(delta_muscle, 2))} kg de massa magra.")

    if delta_peso > 0:
        comparativo.append(f"Ganhou {round(delta_peso, 2)} kg de peso total.")
    elif delta_peso < 0:
        comparativo.append(f"Perdeu {abs(round(delta_peso, 2))} kg de peso total.")

    return {
        "data_inicial": av1["last"],
        "data_final": av2["last"],
        "comparativo": comparativo
    }

@tool("sugerir_ajustes_treino")
def sugerir_ajustes_treino(nome_aluno: str) -> dict:
    """
    Sugere altera√ß√µes no treino com base no feedback do aluno e em suas caracter√≠sticas pessoais.

    Par√¢metros:
    - aluno: dict contendo os dados do aluno (objetivo, experi√™ncia, frequ√™ncia, estilo, etc.)
    - feedback: dict com o √∫ltimo feedback do aluno (esfor√ßo, recupera√ß√£o, mensagem)

    Retorna:
    - Um dicion√°rio com data e sugest√µes de ajustes espec√≠ficos no treino atual.
    """
    aluno = coll2.find_one({"student_name": nome_aluno})
    feedback = coll6.find_one({"student": nome_aluno}, sort=[("data", -1)])
     
    ajustes = []

    esforco = feedback.get("esforco", "").lower()
    recuperacao = feedback.get("recover", "").lower()
    objetivo = aluno.get("objective", "").lower()
    estilo = aluno.get("style", "").lower()
    frequencia = aluno.get("frequency", 3)
    tempo = aluno.get("duration", 60)
    experiencia = aluno.get("experience", "").lower()

    if esforco in ["muito alto", "extremo"]:
        ajustes.append("Reduzir o volume ou intensidade dos treinos para evitar sobrecarga.")
    elif esforco in ["muito baixo"]:
        ajustes.append("Aumentar a intensidade ou carga para gerar est√≠mulo efetivo.")

    if recuperacao in ["ruim", "p√©ssima"]:
        ajustes.append("Adicionar mais tempo de descanso ou ajustar a divis√£o do treino.")
    elif recuperacao in ["excelente", "boa"] and esforco in ["alto", "moderado"]:
        ajustes.append("Recupera√ß√£o boa. Pode considerar aumento gradual da intensidade.")

    if objetivo == "emagrecimento":
        ajustes.append("Focar em treinos com maior gasto cal√≥rico e menor tempo de descanso.")

    if experiencia in ["iniciante", "sedent√°rio"]:
        ajustes.append("Evitar sobrecarga. Progredir aos poucos com foco em t√©cnica.")

    if frequencia < 3:
        ajustes.append("Treinos devem ser mais completos e intensos para compensar baixa frequ√™ncia.")
    elif frequencia >= 5 and tempo >= 60:
        ajustes.append("Boa disponibilidade. Permite treinos com maior varia√ß√£o e progress√£o.")

    return {
        "aluno": aluno["student_name"],
        "data_feedback": feedback["data"].strftime("%Y-%m-%d %H:%M"),
        "ajustes": ajustes
    }

@tool("detectar_alerta_fadiga")
def detectar_alerta_fadiga(nome_aluno: str) -> dict:
    """
    Detecta sinais de fadiga ou sobrecarga com base nos √∫ltimos feedbacks do aluno.

    Par√¢metros:
    - nome_aluno: Nome do aluno.

    Retorna:
    - Um alerta indicando se h√° risco de sobrecarga, com base em esfor√ßo e recupera√ß√£o recentes.
    """
    feedbacks = list(coll6.find({"student": nome_aluno}).sort("data", -1).limit(3))

    if not feedbacks:
        return {"erro": "Sem feedbacks suficientes para an√°lise de fadiga."}

    alerta = False
    contador_alerta = 0
    detalhes = []

    for fb in feedbacks:
        esforco = fb.get("esforco", "").lower()
        recuperacao = fb.get("recover", "").lower()

        if esforco in ["muito alto", "extremo"] and recuperacao in ["ruim", "p√©ssima"]:
            contador_alerta += 1
            detalhes.append(f"Feedback de {fb['data'].strftime('%d/%m')}: esfor√ßo alto e m√° recupera√ß√£o.")

    if contador_alerta >= 2:
        alerta = True

    return {
        "aluno": nome_aluno,
        "alerta_fadiga": alerta,
        "detalhes": detalhes if alerta else ["Nenhum padr√£o preocupante detectado."]
    }

@tool("consultar_avaliacoes")
def consultar_avaliacoes(nome_aluno: str) -> dict:
    """
    Consulta o hist√≥rico de avalia√ß√µes f√≠sicas do aluno, mostrando data, gordura, massa magra e peso.

    Par√¢metros:
    - nome_aluno: Nome do aluno cujas avalia√ß√µes devem ser consultadas.

    Retorna:
    - Lista de avalia√ß√µes ordenadas da mais antiga √† mais recente.
    """
    avaliacoes = list(coll4.find({"student_name": nome_aluno}).sort("last", 1))

    if not avaliacoes:
        return {"erro": "Nenhuma avalia√ß√£o encontrada para este aluno."}

    historico = [
        {
            "data": av["last"].strftime("%Y-%m-%d"),
            "gordura_kg": round(av.get("body_fat", 0), 2),
            "massa_magra_kg": round(av.get("body_muscle", 0), 2),
            "peso_kg": round(av.get("peso", 0), 2),
            "gordura_percent": round(av.get("fat_percent", 0), 2)
        }
        for av in avaliacoes
    ]

    return {
        "aluno": nome_aluno,
        "avaliacoes": historico
    }

@tool("listar_feedbacks_aluno")
def listar_feedbacks_aluno(nome_aluno: str) -> dict:
    """
    Lista os feedbacks mais recentes do aluno, com data, esfor√ßo e recupera√ß√£o.

    Par√¢metros:
    - nome_aluno: Nome do aluno para quem se deseja consultar os feedbacks.

    Retorna:
    - Um dicion√°rio com at√© 5 feedbacks, contendo data, esfor√ßo e recupera√ß√£o de cada um.
    """
    feedbacks = list(coll6.find({"student": nome_aluno}).sort("data", -1).limit(5))

    if not feedbacks:
        return {"erro": "Nenhum feedback encontrado para o aluno informado."}

    historico = [
        {
            "data": fb["data"].strftime("%Y-%m-%d %H:%M"),
            "esforco": fb.get("esforco", "N√£o informado"),
            "recuperacao": fb.get("recover", "N√£o informado")
        }
        for fb in feedbacks
    ]

    return {
        "aluno": nome_aluno,
        "feedbacks_recentes": historico
    }

tools = [listar_feedbacks_aluno,consultar_avaliacoes,detectar_alerta_fadiga,resumir_feedbacks_recentes, gerar_relatorio_evolucao,sugerir_ajustes_treino,get_user_by_name,analisar_feedback_node,consultar_material_de_apoio]
tool_executor = ToolNode(tools)
llm = ChatOpenAI(model="gpt-4o-mini",openai_api_key=OPENAI_API_KEY, streaming=True)
memory = MongoDBSaver(coll)
model = create_react_agent(llm, tools,prompt=SYSTEM_PROMPT,checkpointer=memory)
    
class AgentChat:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.memory = self._init_memory()
        self.model = self._build_agent()

    def _init_memory(self):
        # üí• Aqui usamos o m√©todo CORRETO pra sua vers√£o (sem context manager!)
        memory = MongoDBSaver(coll)
        return memory
    
    def _build_agent(self):
        llm = ChatOpenAI(model="gpt-4o-mini", streaming=True)
        return create_react_agent(
            model=llm,
            tools=tools,
            prompt=SYSTEM_PROMPT,
            checkpointer=self.memory
        )
    
    def _create_db_schema(self):
        # Cria o banco de dados e a estrutura necess√°ria
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # Aqui voc√™ deve criar a estrutura do banco de dados necess√°ria
            # Caso o banco de dados seja novo, crie as tabelas e colunas esperadas
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS memory (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                data TEXT
            )
            ''')

            cursor.execute('''
            CREATE TABLE IF NOT EXISTS versions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                version INTEGER,
                data TEXT
            )
            ''')

            conn.commit()
            conn.close()
            print("Banco de dados criado com sucesso.")
        except Exception as e:
            logging.error(f"Erro ao criar o banco de dados: {str(e)}")
            raise e

    def memory_agent(self):
        return self.model    

